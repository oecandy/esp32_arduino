#include "LoRaWan_APP.h"
#include "Arduino.h"

#define VALVE_1_PIN         GPIO5
#define VALVE_2_PIN         GPIO6
#define VALVE_3_PIN         GPIO7
#define VALVE_4_PIN         GPIO4
#define FLOWMETER_PIN       GPIO12
#define CHANNEL             4
#define FIRMWARE_VERSION    18
/*
   set LoraWan_RGB to Active,the RGB active in loraWan
   RGB red means sending;
   RGB purple means joined done;
   RGB blue means RxWindow1;
   RGB yellow means RxWindow2;
   RGB green means received done;
*/

#if FIRMWARE_VERSION == 1 // test-relay-4ch-cubecell
uint8_t devEui[] = { 0xCC, 0xAF, 0x18, 0x5C, 0x36, 0xB3, 0x6B, 0x40 };
uint8_t appEui[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t appKey[] = { 0x21, 0x66, 0xCB, 0x19, 0x96, 0xBF, 0x86, 0xB8, 0x28, 0xF9, 0xDE, 0xB5, 0x95, 0xEC, 0x17, 0x4F };
#elif FIRMWARE_VERSION == 2 // skep-dalseo-sprk-2111-01
uint8_t devEui[] = { 0x2f, 0x89, 0x30, 0x67, 0x17, 0xff, 0x66, 0xcf };
uint8_t appEui[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t appKey[] = { 0xB2, 0xD3, 0x85, 0xA5, 0xCD, 0x7F, 0xFE, 0x3E, 0x22, 0xEF, 0xD7, 0xD8, 0x8A, 0xF6, 0x7E, 0x8A };
#elif FIRMWARE_VERSION == 3 // skep-dalseo-sprk-2111-02
uint8_t devEui[] = { 0x3b, 0xed, 0x5a, 0x6c, 0xa2, 0xba, 0x34, 0xf1 };
uint8_t appEui[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t appKey[] = { 0xD4, 0x40, 0xDC, 0xE3, 0xA1, 0x85, 0x7A, 0x16, 0xF0, 0x66, 0x93, 0xF8, 0xCD, 0x4B, 0x57, 0xC7 };
#elif FIRMWARE_VERSION == 4 // skep-dalseo-sprk-2111-03
uint8_t devEui[] = { 0xfe, 0x53, 0x76, 0x54, 0xab, 0xa2, 0x6f, 0xbf };
uint8_t appEui[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t appKey[] = { 0xDC, 0xA0, 0x6F, 0x35, 0xBA, 0x1E, 0x5C, 0x6A, 0x9B, 0x20, 0xD9, 0x24, 0x09, 0x8A, 0x4D, 0x43 };
#elif FIRMWARE_VERSION == 5 // skep-dalseo-sprk-2111-04
uint8_t devEui[] = { 0x9f, 0x31, 0xf3, 0xd5, 0x5c, 0x5b, 0x59, 0x19 };
uint8_t appEui[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t appKey[] = { 0xDF, 0x63, 0x10, 0xC9, 0x45, 0x95, 0xE0, 0x77, 0x57, 0xF1, 0xBB, 0x2F, 0x18, 0x68, 0x58, 0x4A };
#elif FIRMWARE_VERSION == 6 // skep-dalseo-sprk-2111-05
uint8_t devEui[] = { 0xf6, 0x81, 0x3e, 0xba, 0xbd, 0x4c, 0xae, 0x8c };
uint8_t appEui[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t appKey[] = { 0x88, 0xFD, 0x0B, 0x49, 0xC2, 0xB5, 0x3D, 0xEE, 0x1C, 0x52, 0xBA, 0xE9, 0x4D, 0xB2, 0xC4, 0x7F };
#elif FIRMWARE_VERSION == 7 // skep-dalseo-sprk-2111-06
uint8_t devEui[] = { 0x51, 0xdb, 0xf1, 0xb3, 0x8f, 0x43, 0x26, 0x0c };
uint8_t appEui[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t appKey[] = { 0x0C, 0x13, 0xC6, 0x10, 0x07, 0x01, 0x51, 0xDC, 0xE8, 0x05, 0x96, 0xDE, 0x5F, 0x11, 0x23, 0xCF };
#elif FIRMWARE_VERSION == 8 // skep-dalseo-sprk-2111-07
uint8_t devEui[] = { 0xa7, 0xc4, 0xd2, 0x46, 0x5c, 0x37, 0xc3, 0x33 };
uint8_t appEui[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t appKey[] = { 0xAE, 0x34, 0xBB, 0x06, 0x2E, 0x84, 0xE7, 0x33, 0x31, 0x20, 0x2F, 0x26, 0x50, 0x48, 0x8D, 0xE2 };
#elif FIRMWARE_VERSION == 9 // skep-dalseo-sprk-2111-08
uint8_t devEui[] = { 0xc3, 0x2e, 0xac, 0x62, 0xb9, 0xe6, 0x0c, 0x74 };
uint8_t appEui[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t appKey[] = { 0x4D, 0xFB, 0x56, 0x76, 0xB1, 0x5B, 0x42, 0xB5, 0x96, 0x37, 0x80, 0x27, 0x04, 0x8B, 0xA2, 0x3F };
#elif FIRMWARE_VERSION == 10 // skep-dalseo-sprk-2111-09
uint8_t devEui[] = { 0xe0, 0x50, 0x1b, 0xc9, 0x00, 0x46, 0x1b, 0xb6 };
uint8_t appEui[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t appKey[] = { 0xF9, 0x79, 0x79, 0x60, 0xB7, 0xAF, 0x9F, 0xBA, 0x09, 0xAE, 0xAF, 0x46, 0x7A, 0xF2, 0xE5, 0xC3 };
#elif FIRMWARE_VERSION == 11 // skep-dalseo-sprk-2111-10
uint8_t devEui[] = { 0x0d, 0x9e, 0x08, 0x04, 0x0a, 0x4d, 0xb8, 0x54 };
uint8_t appEui[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t appKey[] = { 0xBB, 0x95, 0xDC, 0x8E, 0x58, 0x1B, 0xD7, 0x48, 0x1D, 0x40, 0xAB, 0xA7, 0x89, 0xFA, 0xCF, 0xEB };
#elif FIRMWARE_VERSION == 12 // skep-dalseo-sprk-2111-11
uint8_t devEui[] = { 0x7c, 0xe6, 0xf8, 0xb3, 0x53, 0xe8, 0x08, 0x76 };
uint8_t appEui[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t appKey[] = { 0x3B, 0xDB, 0x95, 0xE6, 0x89, 0x6A, 0x62, 0x15, 0x0B, 0x7C, 0xF2, 0xBD, 0x97, 0x95, 0xDB, 0x67 };
#elif FIRMWARE_VERSION == 13 // skep-dalseo-sprk-2111-12
uint8_t devEui[] = { 0x1a, 0x4c, 0xc9, 0x79, 0x01, 0x7f, 0x13, 0xf4 };
uint8_t appEui[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t appKey[] = { 0x1A, 0xC6, 0x8C, 0x91, 0xFB, 0x55, 0xD5, 0x71, 0x35, 0xE0, 0x20, 0x9E, 0x82, 0xFA, 0xD2, 0x27 };
#elif FIRMWARE_VERSION == 14 // skep-dalseo-sprk-2111-13
uint8_t devEui[] = { 0xbc, 0x9e, 0x2e, 0xfb, 0x85, 0xc9, 0xe4, 0x36 };
uint8_t appEui[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t appKey[] = { 0xBB, 0x48, 0x9C, 0x90, 0x0F, 0x76, 0x2C, 0xB2, 0x29, 0xC9, 0xA4, 0xF9, 0xF6, 0x99, 0xA1, 0x85 };
#elif FIRMWARE_VERSION == 15 // skep-dalseo-sprk-2111-14
uint8_t devEui[] = { 0xd2, 0x87, 0x4a, 0x9c, 0x08, 0x2e, 0x63, 0xf0 };
uint8_t appEui[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t appKey[] = { 0xE9, 0x21, 0x77, 0x62, 0xFF, 0xC4, 0x59, 0x33, 0xD8, 0x21, 0x83, 0x25, 0x47, 0x03, 0x8E, 0xE2 };
#endif

/* ABP para*/
uint8_t nwkSKey[] = { 0x15, 0xb1, 0xd0, 0xef, 0xa4, 0x63, 0xdf, 0xbe, 0x3d, 0x11, 0x18, 0x1e, 0x1e, 0xc7, 0xda, 0x85 };
uint8_t appSKey[] = { 0xd7, 0x2c, 0x78, 0x75, 0x8c, 0xdc, 0xca, 0xbf, 0x55, 0xee, 0x4a, 0x77, 0x8d, 0x16, 0xef, 0x67 };
uint32_t devAddr =  ( uint32_t )0x007e6ae1;


// LoRaWAN example Sub-Band usage. change the channel to 8-15
uint16_t userChannelsMask[6] = { 0xFF00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 };
/*LoraWan channelsmask, default channels 0-7*/
//uint16_t userChannelsMask[6]={ 0x00FF,0x0000,0x0000,0x0000,0x0000,0x0000 };

/*LoraWan region, select in arduino IDE tools*/
LoRaMacRegion_t loraWanRegion = ACTIVE_REGION;

/*LoraWan Class, Class A and Class C are supported*/
DeviceClass_t  loraWanClass = LORAWAN_CLASS;

/*the application data transmission duty cycle.  value in [ms].*/
uint32_t appTxDutyCycle = 14000;

/*OTAA or ABP*/
bool overTheAirActivation = LORAWAN_NETMODE;

/*ADR enable*/
bool loraWanAdr = LORAWAN_ADR;

/* set LORAWAN_Net_Reserve ON, the node could save the network info to flash, when node reset not need to join again */
bool keepNet = LORAWAN_NET_RESERVE;

/* Indicates if the node is sending confirmed or unconfirmed messages */
bool isTxConfirmed = LORAWAN_UPLINKMODE;

/* Application port */
uint8_t appPort = 2;

/* Valve control */
uint8_t valveStat;
uint8_t valveCommand[CHANNEL] = {0,};

/* Flowmeter */
char flowChar[5] = "0000";

uint8_t flowStep = 0;

union ulong_type {
  char bytes[4];
  unsigned long ulong_val;
} FL;

/* Battery */
char battChar[4] = "000";

union float_type {
  char bytes[4];
  float float_val;
} BT;


/*!
  Number of trials to transmit the frame, if the LoRaMAC layer did not
  receive an acknowledgment. The MAC performs a datarate adaptation,
  according to the LoRaWAN Specification V1.0.2, chapter 18.4, according
  to the following table:

  Transmission nb | Data Rate
  ----------------|-----------
  1 (first)       | DR
  2               | DR
  3               | max(DR-1,0)
  4               | max(DR-1,0)
  5               | max(DR-2,0)
  6               | max(DR-2,0)
  7               | max(DR-3,0)
  8               | max(DR-3,0)

  Note, that if NbTrials is set to 1 or 2, the MAC will not decrease
  the datarate, in case the LoRaMAC layer did not receive an acknowledgment
*/
uint8_t confirmedNbTrials = 8;

void setup() {
  boardInitMcu();
  Serial.begin(115200);
#if(AT_SUPPORT)
  enableAt();
#endif
  pinSetup();
  deviceState = DEVICE_STATE_INIT;
  LoRaWAN.ifskipjoin();

}

void loop()
{
  switch ( deviceState )
  {
    case DEVICE_STATE_INIT:
      {
#if(AT_SUPPORT)
        getDevParam();
#endif
        printDevParam();
        LoRaWAN.init(loraWanClass, loraWanRegion);
        deviceState = DEVICE_STATE_JOIN;
        break;
      }
    case DEVICE_STATE_JOIN:
      {
        LoRaWAN.join();
        break;
      }
    case DEVICE_STATE_SEND:
      {
        prepareTxFrame( appPort );
        LoRaWAN.send();
        deviceState = DEVICE_STATE_CYCLE;
        break;
      }
    case DEVICE_STATE_CYCLE:
      {
        // Schedule next packet transmission
        txDutyCycleTime = appTxDutyCycle + randr( 0, APP_TX_DUTYCYCLE_RND );
        LoRaWAN.cycle(txDutyCycleTime);
        deviceState = DEVICE_STATE_SLEEP;
        break;
      }
    case DEVICE_STATE_SLEEP:
      {
        LoRaWAN.sleep();
        break;
      }
    default:
      {
        deviceState = DEVICE_STATE_INIT;
        break;
      }
  }
}
